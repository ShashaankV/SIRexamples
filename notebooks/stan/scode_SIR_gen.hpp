
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace scode_SIR_gen_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 39, column 2 to column 16)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 40, column 2 to column 18)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 41, column 2 to column 18)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 42, column 2 to column 15)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 44, column 2 to column 16)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 45, column 2 to column 16)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 47, column 2 to column 18)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 48, column 2 to column 20)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 49, column 2 to column 19)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 51, column 2 to column 68)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 58, column 4 to column 53)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 57, column 20 to line 59, column 3)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 57, column 2 to line 59, column 3)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 26, column 4 to column 23)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 27, column 4 to column 24)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 28, column 11 to column 15)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 28, column 4 to column 17)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 29, column 4 to column 12)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 30, column 4 to column 12)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 31, column 4 to column 30)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 32, column 4 to column 13)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 35, column 2 to column 14)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 36, column 2 to column 13)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 41, column 10 to column 14)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 42, column 9 to column 13)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 10, column 8 to column 22)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 12, column 8 to column 27)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 13, column 8 to column 27)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 14, column 8 to column 29)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 15, column 8 to column 29)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 16, column 8 to column 29)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 18, column 8 to column 29)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 19, column 8 to column 36)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 20, column 8 to column 25)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 21, column 8 to column 21)",
                                                      " (in '/Users/sv54/Git/SIRexamples/notebooks/stan/scode_SIR_gen.stan', line 9, column 4 to line 22, column 5)"};


template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
SIR(const T0__& t, const std::vector<T1__>& ln_init,
    const std::vector<T2__>& theta, const std::vector<T3__>& x_r,
    const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<local_scalar_t__> dy_dt;
    dy_dt = std::vector<local_scalar_t__>(3, DUMMY_VAR__);
    
    local_scalar_t__ kI;
    kI = DUMMY_VAR__;
    
    current_statement__ = 27;
    kI = theta[(1 - 1)];
    local_scalar_t__ kR;
    kR = DUMMY_VAR__;
    
    current_statement__ = 28;
    kR = theta[(2 - 1)];
    local_scalar_t__ lS;
    lS = DUMMY_VAR__;
    
    current_statement__ = 29;
    lS = ln_init[(1 - 1)];
    local_scalar_t__ lI;
    lI = DUMMY_VAR__;
    
    current_statement__ = 30;
    lI = ln_init[(2 - 1)];
    local_scalar_t__ lR;
    lR = DUMMY_VAR__;
    
    current_statement__ = 31;
    lR = ln_init[(3 - 1)];
    current_statement__ = 32;
    assign(dy_dt, cons_list(index_uni(1), nil_index_list()),
      ((-kI * lS) * lI), "assigning variable dy_dt");
    current_statement__ = 33;
    assign(dy_dt, cons_list(index_uni(2), nil_index_list()),
      (((kI * lS) * lI) - (kR * lI)), "assigning variable dy_dt");
    current_statement__ = 34;
    assign(dy_dt, cons_list(index_uni(3), nil_index_list()), (kR * lR),
      "assigning variable dy_dt");
    current_statement__ = 35;
    return dy_dt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct SIR_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& t, const std::vector<T1__>& ln_init,
           const std::vector<T2__>& theta, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return SIR(t, ln_init, theta, x_r, x_i, pstream__);
}
};

class scode_SIR_gen_model final : public model_base_crtp<scode_SIR_gen_model> {

 private:
  int Nsusc;
  int nobs;
  std::vector<double> t;
  double kI;
  double kR;
  double S0;
  double phi;
  std::vector<double> x_r;
  std::vector<int> x_i;
 
 public:
  ~scode_SIR_gen_model() { }
  
  inline std::string model_name() const final { return "scode_SIR_gen_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  scode_SIR_gen_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "scode_SIR_gen_model_namespace::scode_SIR_gen_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 14;
      context__.validate_dims("data initialization","Nsusc","int",
          context__.to_vec());
      Nsusc = std::numeric_limits<int>::min();
      
      current_statement__ = 14;
      Nsusc = context__.vals_i("Nsusc")[(1 - 1)];
      current_statement__ = 14;
      current_statement__ = 14;
      check_greater_or_equal(function__, "Nsusc", Nsusc, 1);
      current_statement__ = 15;
      context__.validate_dims("data initialization","nobs","int",
          context__.to_vec());
      nobs = std::numeric_limits<int>::min();
      
      current_statement__ = 15;
      nobs = context__.vals_i("nobs")[(1 - 1)];
      current_statement__ = 15;
      current_statement__ = 15;
      check_greater_or_equal(function__, "nobs", nobs, 1);
      current_statement__ = 16;
      validate_non_negative_index("t", "nobs", nobs);
      current_statement__ = 17;
      context__.validate_dims("data initialization","t","double",
          context__.to_vec(nobs));
      t = std::vector<double>(nobs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 17;
      assign(t, nil_index_list(), context__.vals_r("t"),
        "assigning variable t");
      current_statement__ = 18;
      context__.validate_dims("data initialization","kI","double",
          context__.to_vec());
      kI = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      kI = context__.vals_r("kI")[(1 - 1)];
      current_statement__ = 19;
      context__.validate_dims("data initialization","kR","double",
          context__.to_vec());
      kR = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 19;
      kR = context__.vals_r("kR")[(1 - 1)];
      current_statement__ = 20;
      context__.validate_dims("data initialization","S0","double",
          context__.to_vec());
      S0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 20;
      S0 = context__.vals_r("S0")[(1 - 1)];
      current_statement__ = 20;
      current_statement__ = 20;
      check_greater_or_equal(function__, "S0", S0, 0);
      current_statement__ = 20;
      current_statement__ = 20;
      check_less_or_equal(function__, "S0", S0, 1);
      current_statement__ = 21;
      context__.validate_dims("data initialization","phi","double",
          context__.to_vec());
      phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 21;
      phi = context__.vals_r("phi")[(1 - 1)];
      current_statement__ = 22;
      x_r = std::vector<double>(0, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 23;
      x_i = std::vector<int>(0, std::numeric_limits<int>::min());
      
      current_statement__ = 24;
      validate_non_negative_index("ln", "nobs", nobs);
      current_statement__ = 25;
      validate_non_negative_index("I", "nobs", nobs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "scode_SIR_gen_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "scode_SIR_gen_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> theta;
      theta = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ln_init;
      ln_init = std::vector<double>(3, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<std::vector<double>> ln;
      ln = std::vector<std::vector<double>>(nobs, std::vector<double>(3, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<double> I;
      I = std::vector<double>(nobs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(theta, cons_list(index_uni(1), nil_index_list()), kI,
        "assigning variable theta");
      current_statement__ = 6;
      assign(theta, cons_list(index_uni(2), nil_index_list()), kR,
        "assigning variable theta");
      current_statement__ = 7;
      assign(ln_init, cons_list(index_uni(1), nil_index_list()), S0,
        "assigning variable ln_init");
      current_statement__ = 8;
      assign(ln_init, cons_list(index_uni(2), nil_index_list()), (1 - S0),
        "assigning variable ln_init");
      current_statement__ = 9;
      assign(ln_init, cons_list(index_uni(3), nil_index_list()), 0.0,
        "assigning variable ln_init");
      current_statement__ = 10;
      assign(ln, nil_index_list(),
        integrate_ode_rk45(SIR_functor__(), ln_init, (t[(1 - 1)] - 1), t,
          theta, x_r, x_i, pstream__), "assigning variable ln");
      current_statement__ = 13;
      for (int i = 1; i <= nobs; ++i) {
        current_statement__ = 11;
        assign(I, cons_list(index_uni(i), nil_index_list()),
          neg_binomial_2_rng((ln[(i - 1)][(2 - 1)] * Nsusc), phi, base_rng__),
          "assigning variable I");}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(theta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(ln_init[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nobs; ++sym2__) {
          vars__.emplace_back(ln[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= nobs; ++sym1__) {
        vars__.emplace_back(I[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("theta");
    names__.emplace_back("ln_init");
    names__.emplace_back("ln");
    names__.emplace_back("I");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nobs),
                                             static_cast<size_t>(3)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nobs)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ln_init" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nobs; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ln" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nobs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "I" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ln_init" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nobs; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ln" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= nobs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "I" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ln_init\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ln\",\"type\":{\"name\":\"array\",\"length\":" << nobs << ",\"element_type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"I\",\"type\":{\"name\":\"array\",\"length\":" << nobs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ln_init\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"ln\",\"type\":{\"name\":\"array\",\"length\":" << nobs << ",\"element_type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"I\",\"type\":{\"name\":\"array\",\"length\":" << nobs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = scode_SIR_gen_model_namespace::scode_SIR_gen_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return scode_SIR_gen_model_namespace::profiles__;
}

#endif


